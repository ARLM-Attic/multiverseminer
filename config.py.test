# Currently only google is supported

from authomatic.providers import oauth2, oauth1, openid
import os

CONFIG = {
    'google': {
        'class_': oauth2.Google,
        'consumer_key': 'you need the actual oauthclientID here',
        'consumer_secret': 'and you need the actual client secret here',
        'scope':  oauth2.Google.user_info_scope,

    },
    # we can add more auth methods here as long as we add login buttons for them...
}
# Statement for enabling the development environment
DEBUG = True

# Define the application directory
basedir = os.path.abspath(os.path.dirname(__file__))

# Define the database - we are working with
# SQLite for this example
<<<<<<< HEAD
SQLALCHEMY_DATABASE_URI =  "postgresql+pg8000://postgres@localhost/mm"
#SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'APP.db')
SQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, 'DB_REPO')
=======
SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(BASE_DIR, 'APP.db')
SQLALCHEMY_MIGRATE_REPO = os.path.join(BASE_DIR, 'DB_REPO')
>>>>>>> master


# Application threads. A common general assumption is
# using 2 per available processor cores - to handle
# incoming requests using one and performing background
# operations using the other.
THREADS_PER_PAGE = 2

# Enable protection agains *Cross-site Request Forgery (CSRF)*
CSRF_ENABLED     = True

# Use a secure, unique and absolutely secret key for
# signing the data.
CSRF_SESSION_KEY = "wwwweeeee."

# Secret key for signing cookies
SECRET_KEY = "c is for cookie"
